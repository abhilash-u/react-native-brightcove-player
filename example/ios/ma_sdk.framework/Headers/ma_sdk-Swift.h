// Generated by Apple Swift version 5.0 (swiftlang-1001.0.69.5 clang-1001.0.46.3)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ma_sdk",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@protocol AkamaiPlayerDataProtocol;

SWIFT_CLASS("_TtC6ma_sdk20AkamaiMediaAnalytics")
@interface AkamaiMediaAnalytics : NSObject
/// Creates an instance of the AkamaiMediaAnalytics
/// \param configURL The configuration/Beacon XML path
///
- (nonnull instancetype)initWithConfigurationUrl:(NSString * _Nonnull)configURL OBJC_DESIGNATED_INITIALIZER;
/// This call starts all metric calculations.
/// \param dataProvider The object implementing AkamaiPlayerDataProtocol interface.
///
/// \param streamUrl The url of the stream being played
///
- (void)handleSessionInit:(id <AkamaiPlayerDataProtocol> _Nonnull)dataProvider withStreamUrl:(NSString * _Nonnull)streamUrl;
/// This method triggers calculation of play start metrics. This must be called immediately after the player has
/// started to play the video.
- (void)handlePlaying;
/// This method must be called when player enters buffering state.
- (void)handleBufferStart;
/// This method must be called when player exits buffering state and starts playing.
- (void)handleBufferEnd;
/// This method must be called when player is paused.
- (void)handlePause;
/// This method must be called when seek if performed on the video.
- (void)handleSeek;
/// This method must be called when player encounters an error and stops playing
/// \param error The error which caused the playback to end.
///
- (void)handleError:(NSString * _Nonnull)error;
/// This method must be called when play back completed successfully
/// \param endReasonCode The reason for completion of video. (playback completed etc.)
///
- (void)handlePlayEnd:(NSString * _Nonnull)endReasonCode;
/// Handles title switch. All we have to do is set custom dimensions and set
/// isFirstTitle = 0
- (void)handleTitleSwitch:(NSDictionary<NSString *, NSString *> * _Nonnull)customData;
/// Ad apis
/// This call must be made just when the Ad is loaded into the player.
/// \param adInfo a dictionary containing ad load related information
///
- (void)handleAdLoaded:(NSDictionary<NSString *, NSString *> * _Nonnull)adInfo;
/// This call should be made just when the Ad starts playing.
/// \param adInfo a dictionary containing ad start related information
///
- (void)handleAdStarted:(NSDictionary<NSString *, NSString *> * _Nonnull)adInfo;
/// This call should be made when 25% of Ad has played.
- (void)handleAdFirstQuartile;
/// This call should be made when 50% of Ad has played.
- (void)handleAdMidPoint;
/// This call should be made when 75% of Ad has played.
- (void)handleAdThirdQuartile;
/// This call is made when the ad has completely played.
- (void)handleAdComplete;
/// This call should be made when the Ad has been stopped/closed/skipped by the user.
- (void)handleAdSkipped;
/// This call should be made when an error occurs while playing the Ad.
- (void)handleAdError;
/// The method to be called when the application quits.
- (void)handleApplicationExit;
/// This method must be called either when bit rate of the video changes or bit rate information becomes available.
/// \param newBitRate The bit rate currently served (Bit rate in bits per second).
///
- (void)handleBitrateChange:(int64_t)newBitRate;
/// This method can be called to set custom data on the plugin. Ideally should be called before handleSessionInit
/// \param keyInfo Dimension name to be set
///
/// \param data Value to be reported for the dimension.
///
- (void)setData:(NSString * _Nonnull)keyInfo value:(NSString * _Nonnull)data;
/// This method can be called to set stream length
/// \param duration length of the stream in seconds
///
- (void)setStreamDuration:(int64_t)duration;
/// This method can be called for setting veiwerId.
/// \param viewerId The viewerId to be set.
///
- (void)setViewerId:(NSString * _Nonnull)viewerId;
/// This method can be called for setting veiwer diagnostic Id.
/// \param diagnosticId The viewer diagnostic Id to be set.
///
- (void)setViewerDiagnosticId:(NSString * _Nonnull)diagnosticId;
/// Method to turn on reporting of server ip address. This is currently supported only for akamai hosted stream
- (void)enableServerIpLookup;
/// Method to turn off reporting of server ip address. This is currently supported only for akamai hosted stream
- (void)disableServerIpLookup;
/// Method to turn off reporting of location.
- (void)enableLocation;
/// Method to turn off reporting of location.
- (void)disableLocation;
/// Method to turn on/off beacon reporting
/// \param enable True to turn on the logging, false to turn it off.
///
- (void)setDebugLogging:(BOOL)enable;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP6ma_sdk24AkamaiPlayerDataProtocol_")
@protocol AkamaiPlayerDataProtocol
/// This call should return the current stream head position of the player in seconds.
- (double)streamHeadPosition SWIFT_WARN_UNUSED_RESULT;
/// Bytes loaded until present time
- (int64_t)bytesLoaded SWIFT_WARN_UNUSED_RESULT;
/// Number of frames dropped until present time.
- (NSInteger)droppedFrames SWIFT_WARN_UNUSED_RESULT;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
